!!!_layout.cs
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - FoodTracker</title>

    <environment include="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
              asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
              crossorigin="anonymous"
              integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"/>
    </environment>
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">FoodTracker</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
                    <partial name="_LoginPartial" />
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <partial name="_CookieConsentPartial" />
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2019 - FoodTracker - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <environment include="Development">
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
                asp-fallback-src="~/lib/jquery/dist/jquery.min.js"
                asp-fallback-test="window.jQuery"
                crossorigin="anonymous"
                integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=">
        </script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"
                asp-fallback-src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"
                asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal"
                crossorigin="anonymous"
                integrity="sha384-xrRywqdh3PHs8keKZN+8zzc5TX0GRTLCcmivcbNJWm2rs5C8PRhcEn3czEjhAO9o">
        </script>
    </environment>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @RenderSection("Scripts", required: false)
</body>
</html>

----------
index.cshtml

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

----


create cshtml

@model FoodTracker.Models.ViewModels.FoodViewModel
@using FoodTracker.Extensions
@{
	ViewData["Title"] = "Create";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<h2 class="text-info">Create FoodItem</h2>
<br />
<form method="post" asp-action="Create" enctype="multipart/form-data">
	<div class="border backgroundWhite">
		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<div class="form-group row">
			<div class="col-2">
				<label asp-for="Food.Name" class="col-form-label"></label>
			</div>
			<div class="col-5">
				<input asp-for="Food.Name" class="form-control" />
			</div>
			<span asp-validation-for="Food.Name" class="text-danger"></span>
		</div>
		<div class="form-group row">
			<div class="col-2">
				<label asp-for="Food.Description" class="col-form-label"></label>
			</div>
			<div class="col-5">
				@Html.TextAreaFor(m => m.Food.Description)
			</div>
			<span asp-validation-for="Food.Description" class="text-danger"></span>
		</div>
		<div class="form-group row">
			<label asp-for="Food.BestBefore" class="col-sm-2 col-form-label"></label>
			<div class="col-sm-10">
				<input asp-for="Food.BestBefore" class="form-control" placeholder="Best before" />
				<span asp-validation-for="Food.BestBefore" class="text-danger"></span>
			</div>
		</div>
		<div class="form-group row">
			<label asp-for="Food.QuantityLeft" class="col-sm-2 col-form-label"></label>
			<div class="col-sm-10">
				<select asp-for="Food.QuantityLeft" class="custom-select mr-sm-2"
						asp-items="Html.GetEnumSelectList<QuantityLeft>()">
					<option value="">Please Select</option>
				</select>
			</div>
		</div>

		<div class="form-group row">
			<div class="col-2">
				<label asp-for="Food.CategoryId" class="col-form-label"></label>
			</div>
			<div class="col-5">
				<select asp-for="@Model.Food.CategoryId" id="CategoryId"
				asp-items="Model.Category.ToSelectListItem(Model.Food.CategoryId)" class="form-control"></select>
			</div>
		</div>
		<div class="form-group row">
			<div class="col-2">
				<label asp-for="Food.SubCategoryId" class="col-form-label"></label>
			</div>
			<div class="col-5">
				<select asp-for="@Model.Food.SubCategoryId" name="SubCategoryId" id="SubCategoryId"
				asp-items="@(new SelectList(string.Empty,"Id","Name"))" class="form-control"></select>
			</div>
		</div>
		<div class="form-group row">
			<div class="col-5 offset-2">
				<partial name="_CreateAndBackToListButton" />
			</div>
		</div>
	</div>
</form>
@section Scripts{	

	<script type="text/javascript">
        $(document).ready(function () {
            getSubCategory();
            $('#CategoryId').change(function () {
                getSubCategory();
            });
        });


        function getSubCategory() {
            var url = '@Url.Content("~/")' + "Admin/SubCategory/GetSubCategory";
            var ddlsoruce = '#CategoryId';
            $.getJSON(url, { id: $(ddlsoruce).val() }, function (data) {
                var items = '';
                $('#SubCategoryId').empty();
                $.each(data, function (i, subcategory) {
                    items += "<option value='" + subcategory.value + "'>" + subcategory.text + "</option>";
                });

                $('#SubCategoryId').html(items);
            })
        }
	</script>

	@{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

edit.cshtml

@model FoodTracker.Models.ViewModels.FoodViewModel
@using FoodTracker.Extensions
@{
	ViewData["Title"] = "Create";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<h2 class="text-info">Edit FoodItem</h2>
<br />
<form method="post" asp-action="Create" enctype="multipart/form-data">
	<div class="border backgroundWhite row">
		<input type="hidden" asp-for="Food.ID" />
		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		div class="form-group row">
		<label asp-for="Food.Name" class="col-sm-2 col-form-label"></label>
		<div class="col-sm-10">
			<input asp-for="Food.Name" class="form-control" placeholder="Name" />
			<span asp-validation-for="Food.Name" class="text-danger"></span>
		</div>
	</div>

	<div class="form-group row">
		<div class="col-2">
			<label asp-for="Food.CategoryId" class="col-form-label"></label>
		</div>
		<div class="col-5">
			<select asp-for="@Model.Food.CategoryId" id="CategoryId"
					asp-items="Model.Category.ToSelectListItem(Model.Food.CategoryId)" class="form-control"></select>
			<span asp-validation-for="Food.CategoryId" class="text-danger"></span>
		</div>
	</div>

	<div class="form-group row">
		<div class="col-2">
			<label asp-for="Food.SubCategoryId" class="col-form-label"></label>
		</div>
		<div class="col-5">
			<select asp-for="@Model.Food.SubCategoryId" name="SubCategoryId" id="SubCategoryId"
					asp-items="@(new SelectList(string.Empty,"Id","Name"))" class="form-control"></select>
			<span asp-validation-for="Food.SubCategoryId" class="text-danger"></span>
		</div>
	</div>

	<div class="form-group row">
		<label asp-for="Food.Measurement" class="col-sm-2 col-form-label"></label>
		<div class="col-sm-10">
			<select asp-for="Food.Measurement" class="custom-select mr-sm-2"
					asp-items="Html.GetEnumSelectList<MeasType>()">
				<option value="">Please Select</option>
			</select>
			<span asp-validation-for="Food.Measurement" class="text-danger"></span>
		</div>
	</div>

	</div>
	<div class="col-3 offset-1">		
	</div>
	<div class="col-8">
		<div class="col-8 offset-4">
			<partial name="_EditAndBackToListButton" model="Model.MenuItem.Id" />
		</div>
	</div>

	</div>
</form>
@section Scripts{
	<script>tinymce.init({
            selector: 'textarea',
            plugins: "lists",
            menubar: 'file edit format'
        });</script>

	<script type="text/javascript">
        $(document).ready(function () {
            getSubCategory();
            $('#CategoryId').change(function () {
                getSubCategory();
            });
        });


        function getSubCategory() {
            var url = '@Url.Content("~/")' + "Admin/SubCategory/GetSubCategory";
            var ddlsoruce = '#CategoryId';
            $.getJSON(url, { id: $(ddlsoruce).val() }, function (data) {
                var items = '';
                $('#SubCategoryId').empty();
                $.each(data, function (i, subcategory) {
                    items += "<option value='" + subcategory.value + "'>" + subcategory.text + "</option>";
                });

                $('#SubCategoryId').html(items);
            })
        }
	</script>

	@{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


---

index.cshtml

@model IEnumerable<Food>
@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<br /><br />
<div class="border backgroundWhite">
	<div class="row">
		<div class="col-6">
			<h2 class="text-info"> Menu Item List</h2>
		</div>
		<div class="col-6 text-right">
			<partial name="_CreateButtonPartial" />
		</div>
	</div>
	<br />
	<div>
		@if (Model.Count() > 0)
		{
			<table class="table table-striped border">
				<tr class="table-secondary">
					<th>
						@Html.DisplayNameFor(m => m.Name)
					</th>
					<th>
						@Html.DisplayNameFor(m => m.Description)
					</th>
					<th>
						@Html.DisplayNameFor(m => m.CategoryId)
					</th>
					<th>
						@Html.DisplayNameFor(m => m.SubCategoryId)
					</th>
					<th></th>
					<th></th>
				</tr>
				@foreach (var item in Model)
				{
					<tr>
						<td>
							@Html.DisplayFor(m => item.Name)
						</td>
						<td>
							@Html.DisplayFor(m => item.Description)
						</td>
						<td>
							@Html.DisplayFor(m => item.Category.Name)
						</td>
						<td>
							@Html.DisplayFor(m => item.SubCategory.Name)
						</td>
						<td>
							<partial name="_TableButtonPartial" model="item.ID" />
						</td>
					</tr>
				}
			</table>
		}
		else
		{
			<p>No menu item exists...</p>
		}
	</div>
</div>


---

edit.cshtml

@model FoodTracker.Models.ViewModels.FoodViewModel
@using FoodTracker.Extensions
@{
	ViewData["Title"] = "Create";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<h2 class="text-info">Edit Food Type</h2>
<br />
<form method="post" asp-action="Create" enctype="multipart/form-data">
	<div class="border backgroundWhite row">
		<input type="hidden" asp-for="Food.ID" />
		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<div class="col-8">
			
			<div class="form-group row">
				<label asp-for="Food.Name" class="col-sm-2 col-form-label"></label>
				<div class="col-sm-10">
					<input asp-for="Food.Name" class="form-control" placeholder="Name" />
					<span asp-validation-for="Food.Name" class="text-danger"></span>
				</div>
			</div>

			<div class="form-group row">
				<div class="col-2">
					<label asp-for="Food.CategoryId" class="col-form-label"></label>
				</div>
				<div class="col-5">
					<select asp-for="@Model.Food.CategoryId" id="CategoryId"
							asp-items="Model.Category.ToSelectListItem(Model.Food.CategoryId)" class="form-control"></select>
					<span asp-validation-for="Food.CategoryId" class="text-danger"></span>
				</div>
			</div>

			<div class="form-group row">
				<div class="col-2">
					<label asp-for="Food.SubCategoryId" class="col-form-label"></label>
				</div>
				<div class="col-5">
					<select asp-for="@Model.Food.SubCategoryId" name="SubCategoryId" id="SubCategoryId"
							asp-items="@(new SelectList(string.Empty,"Id","Name"))" class="form-control"></select>
					<span asp-validation-for="Food.SubCategoryId" class="text-danger"></span>
				</div>
			</div>

			<div class="form-group row">
				<label asp-for="Food.Measurement" class="col-sm-2 col-form-label"></label>
				<div class="col-sm-10">
					<select asp-for="Food.Measurement" class="custom-select mr-sm-2"
							asp-items="Html.GetEnumSelectList<MeasType>()">
						<option value="">Please Select</option>
					</select>
					<span asp-validation-for="Food.Measurement" class="text-danger"></span>
				</div>
			</div>
		</div>
		<div class="col-3 offset-1">

		</div>
		<div class="col-8">
			<div class="col-8 offset-4">
				<partial name="_EditAndBackToListButton" model="Model.Food.ID" />
			</div>
		</div>

	</div>
</form>
@section Scripts{
	<script>
	tinymce.init({
			selector: 'textarea',
			plugins: "lists",
			menubar: 'file edit format'
		});</script>

	<script type="text/javascript">
        $(document).ready(function () {
            getSubCategory();
            $('#CategoryId').change(function () {
                getSubCategory();
            });
        });


        function getSubCategory() {
            var url = '@Url.Content("~/")' + "Admin/SubCategory/GetSubCategory";
            var ddlsoruce = '#CategoryId';
            $.getJSON(url, { id: $(ddlsoruce).val() }, function (data) {
                var items = '';
                $('#SubCategoryId').empty();
                $.each(data, function (i, subcategory) {
                    items += "<option value='" + subcategory.value + "'>" + subcategory.text + "</option>";
                });

                $('#SubCategoryId').html(items);
            })
        }
	</script>

	@{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



----

_ThumbnailArePartial.cshtml
@if (item.Spicyness == "1")
								{
									<img srcset="/images/mild.png" title="Mild" />
								}
								@if (item.Spicyness == "2")
								{
									<img srcset="/images/spicy.png" title="Spicy" />
								}
								@if (item.Spicyness == "3")
								{
									<img srcset="/images/veryspicy.png" title="Very Spicy" />
								}


<div class="col-4 text-right" style="color:maroon">
								<h4>$@item.Price</h4>
							</div>


_ThumbnailCategory.cshtml (full)

@model IEnumerable<Food>
@*
	For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@if (Model.Count() > 0)
{
	<div class="col-12 post @Model.FirstOrDefault().Category.Name.Replace(" ",string.Empty) menu-restaurant">
		<div class="row">
			<h3 class="text-success"> @Model.FirstOrDefault().Category.Name </h3>
		</div>
		@foreach (var item in Model)
		{
			<div class="border border-info rounded col-12" style="margin-bottom:10px; margin-top:10px; padding:10px">
				<div class="row">
					<div class="col-md-3 col-sm-12">
						<label class="text-primary" style="font-size:21px;color:maroon">@item.Name</label>
					</div>
					<div class="col-md-9 col-sm-12">
						<div class="row pr-3">
							<div class="col-8">
								<label class="text-primary" style="font-size:21px;color:black">@item.BestBefore</label>	
							</div>
						</div>
						<div class="col-4">
							
						</div>

						<div class="row col-12 text-justify d-none d-md-block">
							<p>@Html.Raw(item.Description)</p>
						</div>
						<div class="col-md-3 col-sm-12 offset-md-9 text-center">
							<a asp-action="Details" class="btn btn-success form-control" asp-route-id="@item.ID">Details</a>
						</div>
					</div>
				</div>
			</div>
		}
		<div class="p-4"></div>
	</div>
}

----
thumbnailsubcategory.cshtml

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - FoodTracker</title>

	<environment include="Development">
		<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
		<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
	</environment>
	<environment exclude="Development">
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
			  asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
			  asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
			  crossorigin="anonymous"
			  integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" />
		<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
		<link href="~/lib/bootstrap/css/bootstrap.css" rel="stylesheet" />
		<script src="~/lib/jquery/jquery.js"></script>
		<script src="~/lib/bootstrap/js/bootstrap.js"></script>
	</environment>
	<link rel="stylesheet" href="~/css/site.css" />
</head>
<body>
	<header>
		<nav class="navbar navbar-expand-sm bg-dark navbar-dark border-bottom box-shadow mb-3">
			<div class="container">
				<a class="navbar-brand" asp-area="Customer" asp-controller="Home" asp-action="Index"></a>
				<button class="navbar-toggler float-sm-left" type="button"
						data-toggle="collapse"
						data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
						aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>

				<div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
					<partial name="_LoginPartial" />
					<ul class="navbar-nav flex-grow-1">
						<li>
							<a class="nav-link" role="button" aria-expanded="false"
							   asp-action="Index" asp-controller="Home" asp-area="User">
								FoodList
							</a>
						</li>
						<li>
							<a class="nav-link" href="#" role="button" aria-expanded="false">
								Shopping List
							</a>
						</li>
						<li class="nav-item dropdown text-white-50 float-right text-right">
							<a class="nav-link dropdown-toggle" href="#" id="navbarDropDownMenuLink" role="button"
							   data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
								Content Management
							</a>
							<div class="dropdown-menu" aria-labelledby="navbarDropDownMenuLink">
								<a class="dropdown-item" asp-action="Index" asp-controller="Category" asp-area="Admin">Category</a>
								<a class="dropdown-item" asp-action="Index" asp-controller="SubCategory" asp-area="Admin">SubCategory</a>
								<a class="dropdown-item" asp-action="Index" asp-controller="Food" asp-area="Admin">Food Types</a>
							</div>
						</li>
					</ul>					
				</div>
				<div class="float-right" style=" padding-top: 8px; padding-bottom: 0px; padding-right: 15px; line-height: 0.5;">
					<input class="form-control" id="myInput" type="text" placeholder="Search..">
					<br>
				</div>
			</div>			
		</nav>		
	</header>
	<div class="container">
		<partial name="_CookieConsentPartial" />
		<main role="main" class="pb-3">
			@RenderBody()
		</main>
	</div>

	<footer class="border-top footer text-muted">
		<div class="container">
			&copy; 2019 - FoodTracker - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
		</div>
	</footer>

	<environment include="Development">
		<script src="~/lib/jquery/dist/jquery.js"></script>
		<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.js"></script>
	</environment>
	<environment exclude="Development">
		<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
				asp-fallback-src="~/lib/jquery/dist/jquery.min.js"
				asp-fallback-test="window.jQuery"
				crossorigin="anonymous"
				integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=">
		</script>
		<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"
				asp-fallback-src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"
				asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal"
				crossorigin="anonymous"
				integrity="sha384-xrRywqdh3PHs8keKZN+8zzc5TX0GRTLCcmivcbNJWm2rs5C8PRhcEn3czEjhAO9o">
		</script>
	</environment>
	<script src="~/js/site.js" asp-append-version="true"></script>

	@RenderSection("Scripts", required: false)
</body>
</html>



---

addtostock.cshtml

@model FoodTracker.Models.ViewModels.FoodStockCreate
@{
	ViewData["Title"] = "Create";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<br />
<h2 class="text-info">Add Food Item to stock</h2>
<br />


<form enctype="multipart/form-data" asp-controller="home" asp-action="Create" method="post" class="mt-3">
	<div class="backgroundWhiteBorder row">
		<div class="col-8">
			<fieldset disabled>
				<div class="form-group row">
					<div class="col-4">
						<label asp-for="Food.Name" class="custom-label"></label>
					</div>
					<div class="col-8">
						<input asp-for="Food.Name" class="form-control" />
					</div>
				</div>
			</fieldset>
		</div>

		<div class="col-8">
			<fieldset disabled>
				<div class="form-group row">
					<div class="col-4">
						<label asp-for="Food.Category.Name" class="custom-label"></label>
					</div>
					<div class="col-8">
						<input asp-for="Food.Category.Name" class="form-control" />
					</div>
				</div>
			</fieldset>
		</div>

		<div class="col-8">
			<fieldset disabled>
				<div class="form-group row">
					<div class="col-4">
						<label asp-for="Food.SubCategory.Name" class="custom-label"></label>
					</div>
					<div class="col-8">
						<input asp-for="Food.SubCategory.Name" class="form-control" />
					</div>
				</div>
			</fieldset>
		</div>

		<div class="col-8">
			<div class="form-group row">
				<div class="col-4">
					<label asp-for="Food.Description" class="custom-label"></label>
				</div>
				<div class="col-8">
					<input asp-for="Food.Description" class="form-control" />
					<span asp-validation-for="Food.Description" class="text-danger"></span>
				</div>
			</div>
		</div>

		<div class="col-8">
			<div class="form-group row">
				<div class="col-4">
					<label asp-for="Food.BestBefore" class="custom-label"></label>
				</div>
				<div class="col-8">
					<input asp-for="Food.BestBefore" class="form-control" />
					<span asp-validation-for="Food.BestBefore" class="text-danger"></span>
				</div>
			</div>
		</div>

		<div class="col-8">
			<fieldset disabled>
				<div class="form-group row">
					<div class="col-4">
						<label asp-for="Food.QuantityLeft" class="custom-label"></label>
					</div>
					<div class="col-8">
						<select asp-for="Food.Quantity" class="custom-select mr-sm-2"
								asp-items="Html.GetEnumSelectList<QuantityLeft>()">
							<option value="">Please Select</option>
						</select>
					</div>
				</div>
			</fieldset>
		</div>

		<div class="col-8">			
				<div class="form-group row">
					<div class="col-4">
						<label asp-for="Unit" class="custom-label"></label>
					</div>
					<div class="col-8">
						<input asp-for="Unit" class="form-control" />
						<span asp-validation-for="Unit" class="text-danger"></span>
					</div>
				</div>
		</div>

		<div class="col-8">
			<fieldset disabled>
				<div class="form-group row">
					<div class="col-4">
						<label asp-for="Description" class="custom-label"></label>
					</div>
					<div class="col-8">
						<input asp-for="Description" class="form-control" />
					</div>
				</div>
			</fieldset>
		</div>
	</div>



	<div class=text-danger asp-validation-summary="All"></div>

	<div id="submitbtn" class="form-group row">
		<div class="col-sm-10">
			<button type="submit" class="btn btn-primary">Create</button>
		</div>
	</div>

</form>

@section Scripts{
	<script type="text/javascript">
        $(document).ready(function () {
            getSubCategory();
            $('#CategoryId').change(function () {
                getSubCategory();
            });
        });

        function getSubCategory() {
            var url = '@Url.Content("~/")' + "Admin/SubCategory/GetSubCategory";
            var ddlsoruce = '#CategoryId';
            $.getJSON(url, { id: $(ddlsoruce).val() }, function (data) {
                var items = '';
                $('#SubCategoryId').empty();
                $.each(data, function (i, subcategory) {
                    items += "<option value='" + subcategory.value + "'>" + subcategory.text + "</option>";
                });

                $('#SubCategoryId').html(items);
            })
        }
	</script>

	@{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using FoodTracker.Models.ViewModels;

namespace FoodTracker.Models
{
	
	public class ImportExportManager : IDataManager
	{
		public const string XMLinPath = @"C:\Users\Szabolcs\Source\Repos\FoodTracker\FoodTracker\FoodTracker\Port\DataToImport.xml";
		public void ExportXML(PortDBViewModel input)
		{
			
		}

		public void ImportXML()
		{
			//PortDBViewModel originalParsedXML = Testing.ParseXML(Testing.XMLinPath);
			PortDBViewModel originalParsedXML = ParseXML(Testing.XMLinPath);
			//PortDBViewModel normalizedXml = Testing.normalizeIDs(originalParsedXML);
			PortDBViewModel normalizedXml = normalizeIDs(originalParsedXML);

			/*
			Testing.AddManyCategoriesFromParamToDBTest(normalizedXml.Categories);
			Testing.AddManySubCategoriesFromParamToDBTest(normalizedXml.Subcategories);
			Testing.AddManyFoodItemFromParamToDBTest(normalizedXml.Foods);
			*/

			Testing.AddManyCategoriesFromParamToDBTest(normalizedXml.Categories);
			Testing.AddManySubCategoriesFromParamToDBTest(normalizedXml.Subcategories);
			Testing.AddManyFoodItemFromParamToDBTest(normalizedXml.Foods);
		}

		public static PortDBViewModel normalizeIDs(PortDBViewModel input)
		{
			//Initialize data counts
			int CategoryCount = input.Categories.Count();
			int SubCategoryCount = input.Subcategories.Count();
			int FoodItemsCount = input.Foods.Count();

			List<Category> Categories2DB = input.Categories.ToList();
			List<SubCategory> SubCategories2DB = input.Subcategories.ToList();
			List<Food> Foods2DB = input.Foods.ToList();

			//Normalize subcategory.CategoryId to new Category.ID
			//1. Take all Categories
			for (int i = 0; i < CategoryCount; i++)
			{
				//2. Check all subcategories
				foreach (var subcategory in SubCategories2DB)
				{
					//if an "old" subcategory.categID mathes and "old" Category.ID... (foreign key ref.)
					if (subcategory.CategoryId == Categories2DB[i].Id)
					{
						//replace subcateg.Categ by the index number+1 of the categ
						// (cf. categ index+1 value will be the new ID in the new "clean" DB).						
						subcategory.CategoryId = i + 1;
					}
				}
			}

			//normalize the food.SubCategoryId to new SubCategory.ID
			//1. Take all Subcategories
			for (int i = 0; i < SubCategoryCount; i++)
			{
				//2. iterate all foods
				foreach (var food in Foods2DB)
				{
					//3. if an "old" food.subcategID matches the "old" subcateg.id (foreign key ref.)
					if (food.SubCategoryId == SubCategories2DB[i].Id)
					{
						//4. replace the food.subcateg with the index+1 (index+1 will be
						//the new subcat.ID in the "clean" DB).
						food.SubCategoryId = i + 1;
					}
				}
			}

			//normalize the Food.Category to new Category.ID
			//1. Take all categories
			for (int i = 0; i < CategoryCount; i++)
			{
				//2. Iterate through all the foods
				foreach (var food in Foods2DB)
				{
					//3. if an "old" food.Category mathes the "old" category.ID (foreign key ref.)
					if (food.CategoryId == Categories2DB[i].Id)
					{
						//4. update food.CategID with index+1 (cycle index+1 will be the new Categ.ID)
						food.CategoryId = i + 1;
						//5. set all food.ID to 0 (EF can then insert it to DB)
						food.ID = 0;
					}
				}
			}

			//set all Category ID to 0 (EF can then insert it to DB)
			foreach (var item in Categories2DB)
			{
				item.Id = 0;
			}

			//set all Subcategory ID to 0 (EF can then insert it to DB)
			foreach (var item in SubCategories2DB)
			{
				item.Id = 0;
			}

			PortDBViewModel output = new PortDBViewModel
			{
				Categories = Categories2DB,
				Subcategories = SubCategories2DB,
				Foods = Foods2DB
			};
			return output;
		}

		public static PortDBViewModel ParseXML(string XMLPath)
		{
			PortDBViewModel DB_VM = new PortDBViewModel();

			XDocument doc = XDocument.Load(XMLPath);
			IEnumerable<Category> categories = from c in doc.Descendants("Category")
											   select new Category()
											   {
												   Id = (int)c.Element("CategoryID"),
												   Name = (string)c.Element("Name")
											   };

			IEnumerable<SubCategory> subCategories = from s in doc.Descendants("Subcategory")
													 select new SubCategory()
													 {
														 Id = (int)s.Element("SubcategoryID"),
														 Name = (string)s.Element("Name"),
														 CategoryId = (int)s.Element("CategoryID")
													 };

			IEnumerable<Food> Foods = from f in doc.Descendants("FoodItem")
									  select new Food()
									  {
										  ID = (int)f.Element("FoodID"),
										  Name = (string)f.Element("Name"),
										  Description = (string)f.Element("Description"),
										  CategoryId = (int)f.Element("CategoryID"),
										  SubCategoryId = (int)f.Element("SubcategoryId"),
										  BestBefore = string.IsNullOrEmpty((string)f.Element("BestBefore")) ? (DateTime?)null : (DateTime)f.Element("BestBefore"),
										  Unit = (int)f.Element("Unit"),
										  QuantityLeft = Enum.Parse<QuantityLeft>((string)f.Element("QuanityLeft")),
										  Measurement = Enum.Parse<MeasType>((string)f.Element("Measurement"))
									  };

			DB_VM.Categories = categories;
			DB_VM.Subcategories = subCategories;
			DB_VM.Foods = Foods;
			return DB_VM;
		}

	}
}


Admin/Controller/DataController

/*using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FoodTracker.Data;
using FoodTracker.Models;
using Microsoft.AspNetCore.Mvc;
using FoodTracker.Extensions;
using FoodTracker.Models.ViewModels;
using FoodTracker.Utility;
using System.Security.Claims;

namespace FoodTracker.Areas.Admin.Controllers
{
	[Area("Admin")]
    public class DataController : Controller
    {
		private readonly ApplicationDbContext applicationDbContext;
		private readonly IDataManager ImpExpMan;


		//public DataController(ApplicationDbContext applicationDbContext)
		//public DataController(ApplicationDbContext applicationDbContext, ImportExportManager iem)
		public DataController(ApplicationDbContext applicationDbContext, IDataManager ImpExpMan)
		{
			
			this.applicationDbContext = applicationDbContext;
			this.ImpExpMan = ImpExpMan;
		}

		public IActionResult Export()
		{
			List<Category> CategoryItems = applicationDbContext.Category.ToList();
			IEnumerable<SubCategory> SubCategoryItems = applicationDbContext.SubCategory.ToList();
			IEnumerable<Food> FoodItems = applicationDbContext.Foods.ToList();

			PortDBViewModel DB_VM = new PortDBViewModel
			{
				Categories = CategoryItems,
				Subcategories = SubCategoryItems,
				Foods = FoodItems
			};
			//PortDBViewModel normalized_DB_VM = ImportExportData.normalizeIDs(DB_VM);
			//ImportExportData.DumpDataToXML(DB_VM);			

			//dm.ExportXML(DB_VM);
			ImpExpMan.ExportXML(DB_VM);
			return RedirectToAction("Index", "Home", new { area = "User" });		
		}

		public IActionResult Import()
		{
			var claimsIdentity = (ClaimsIdentity)User.Identity;
			var claim = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
			SD.userGUID = claim.Value;
			ImpExpMan.ImportXML();
			return RedirectToAction("Index", "Home", new { area = "User" });
*/
			/* ez jóóóó!
			PortDBViewModel originalParsedXML = Testing.ParseXML(Testing.XMLinPath);
			PortDBViewModel normalizedXml = Testing.normalizeIDs(originalParsedXML);				

			Testing.AddManyCategoriesFromParamToDBTest(normalizedXml.Categories);
			Testing.AddManySubCategoriesFromParamToDBTest(normalizedXml.Subcategories);
			Testing.AddManyFoodItemFromParamToDBTest(normalizedXml.Foods);
			*/


			/*
			PortDBViewModel Model2DB = Testing.;

			List<Category> Categories2DB = Model2DB.Categories.ToList();
			List<SubCategory> Subcategories2DB = Model2DB.Subcategories.ToList();
			List<Food> Foods2DB = Model2DB.Foods.ToList();


			using (applicationDbContext)
			{
				//applicationDbContext.Category.AddRange(Categories2DB);							
			
				applicationDbContext.SubCategory.AddRange(Subcategories2DB);							
			
				//applicationDbContext.Foods.AddRange(Foods2DB);
				applicationDbContext.SaveChanges();
			}
			*/

			/*PortDBViewModel DB_VM_Normalized = ImportExportData.ParseXML(SD.XMlAfterNormPath);
			PortDBViewModel DB_VM_NoID = ImportExportData.RemoveIDToDB(DB_VM_Normalized);
			
			//DB_VM_Normalized.Categories.ToList()[0].Id = (int?)null;
			//applicationDbContext.Category.AddRange(DB_VM_Normalized.Categories.ToList());			
			
			List<Category> CategToAddToDB = new List<Category>();
			List<SubCategory> SubCategToAddToDB = new List<SubCategory>();
			List<Food> FoodToAddToDB = new List<Food>();

			foreach (var categitem in DB_VM_Normalized.Categories.ToList())
			{
				Category catitem = new Category
				{
					Name = categitem.Name
				};
				CategToAddToDB.Add(catitem);
			}

			
			foreach (var subcategitem in DB_VM_Normalized.Subcategories.ToList())
			{
				SubCategory subcatitem = new SubCategory
				{
					Name = subcategitem.Name,
					CategoryId = subcategitem.CategoryId
				};
				SubCategToAddToDB.Add(subcatitem);
			}


			foreach (var fooditem in DB_VM_Normalized.Foods.ToList())
			{
				Food newFooditem = new Food
				{
					Name = fooditem.Name,
					Description = fooditem.Description,
					CategoryId = fooditem.CategoryId,
					SubCategoryId = fooditem.SubCategoryId,
					BestBefore = fooditem.BestBefore,
					Unit = fooditem.Unit,
					Measurement = fooditem.Measurement,
					QuantityLeft = fooditem.QuantityLeft
				};
				FoodToAddToDB.Add(newFooditem);
			}			

			/*
			foreach (var categoryToAdd in DB_VM_Normalized.Categories.ToList())
			{
				
				applicationDbContext.Category.Add(categoryToAdd);
			}
			*/

			/*foreach (var categoryToAdd in DB_VM_Normalized.Categories.ToList())
			{
				//le kell bontani a kapcsolatot using-gal nagyon hosszú!
				applicationDbContext.Category.Add(categoryToAdd);
				applicationDbContext.SaveChanges();
			}*/

			//applicationDbContext.Category.AddRange(DB_VM_NoID.Categories);
			//applicationDbContext.SubCategory.AddRange(DB_VM_NoID.Subcategories);
			//applicationDbContext.Foods.AddRange(DB_VM_NoID.Foods);
			/*
			applicationDbContext.Category.AddRange(CategToAddToDB);
			applicationDbContext.SubCategory.AddRange(SubCategToAddToDB);
			applicationDbContext.Foods.AddRange(FoodToAddToDB);
			applicationDbContext.SaveChanges();
			*/
			/*
		}

		public IActionResult Index()
        {
            return View();
        }
    }
}
*/